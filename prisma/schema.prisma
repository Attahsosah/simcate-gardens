generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String            @unique
  emailVerified    DateTime?
  image            String?
  hashedPassword   String?
  role             Role              @default(USER)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  accounts         Account[]
  bookings         Booking[]
  facilityBookings FacilityBooking[]
  sessions         Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Resort {
  id           String        @id @default(cuid())
  name         String
  description  String?
  address      String?
  phone        String?
  email        String?
  website      String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  facilities   Facility[]
  resortImages ResortImage[]
  rooms        Room[]
}

model Room {
  id              String        @id @default(cuid())
  name            String
  description     String?
  price           Float
  capacity        Int
  roomType        RoomType
  isActive        Boolean       @default(true)
  previewImageUrl String?
  resortId        String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  bookings        Booking[]
  resort          Resort        @relation(fields: [resortId], references: [id], onDelete: Cascade)
  amenities       RoomAmenity[]
  roomImages      RoomImage[]
}

model RoomAmenity {
  id      String @id @default(cuid())
  roomId  String
  amenity String
  room    Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([roomId, amenity])
}

model RoomImage {
  id        String   @id @default(cuid())
  url       String
  caption   String?
  roomId    String
  createdAt DateTime @default(now())
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model ResortImage {
  id        String   @id @default(cuid())
  url       String
  caption   String?
  resortId  String
  createdAt DateTime @default(now())
  resort    Resort   @relation(fields: [resortId], references: [id], onDelete: Cascade)
}

model Facility {
  id           String            @id @default(cuid())
  name         String
  description  String?
  facilityType FacilityType
  isActive     Boolean           @default(true)
  imageUrl     String?
  resortId     String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  resort       Resort            @relation(fields: [resortId], references: [id], onDelete: Cascade)
  bookings     FacilityBooking[]
}

model Booking {
  id              String        @id @default(cuid())
  checkIn         DateTime
  checkOut        DateTime
  guests          Int
  totalPrice      Float
  status          BookingStatus @default(PENDING)
  specialRequests String?
  userId          String
  roomId          String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  room            Room          @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FacilityBooking {
  id         String        @id @default(cuid())
  date       DateTime
  time       String?
  guests     Int?
  facilityId String
  userId     String
  status     BookingStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  facility   Facility      @relation(fields: [facilityId], references: [id], onDelete: Cascade)
}

model SectionContent {
  id          String   @id @default(cuid())
  section     String   @unique
  title       String
  subtitle    String?
  description String
  ctaText     String?
  ctaLink     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ColorScheme {
  id              String   @id @default(cuid())
  section         String   @unique
  primaryColor    String   @default("#4F46E5")
  secondaryColor  String   @default("#7C3AED")
  backgroundColor String   @default("#FFFFFF")
  textColor       String   @default("#1F2937")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model SectionImage {
  id        String   @id @default(cuid())
  section   String
  url       String
  caption   String?
  position  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([section, position])
}

model Feature {
  id          String   @id @default(cuid())
  section     String
  title       String
  description String
  icon        String
  position    Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([section, position])
}

model RestaurantDetail {
  id        String   @id @default(cuid())
  title     String
  subtitle  String
  icon      String
  position  Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([position])
}

enum Role {
  USER
  ADMIN
}

enum RoomType {
  STANDARD
  DELUXE
  SUITE
  VILLA
}

enum FacilityType {
  POOL
  SPA
  GYM
  RESTAURANT
  BAR
  CONFERENCE_ROOM
  TENNIS_COURT
  GOLF_COURSE
  BEACH_ACCESS
  PARKING
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
